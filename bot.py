from aiogram import types, Bot, Dispatcher, executor
from BitlyAPI import shorten_urls
from dotenv import dotenv_values
from uuid import uuid4


bot = Bot(token=str(dotenv_values(".env").get("TOKEN")))
dp = Dispatcher(bot)


def cut_link(link: list):
    return shorten_urls(link)



@dp.message_handler(commands=["start", "help"])
async def start(message: types.Message):
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}.\
                        \nü§ñ –≠—Ç–æ —Ç–æ—Ç –∂–µ bit.ly, –Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!\
                        \nüîó –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å—Ç–µ –º–Ω–µ –µ–µ.\
                        \nüëæ –¢–∞–∫ –∂–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å \n@{dotenv_values('.env').get('BOT_NAME')} <–°—Å—ã–ª–∫–∞> –∏ –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç –≤–∞–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—ã–ª–∫—É.\
                        \nü•∑ –ë–æ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª - @moylub")


@dp.message_handler()
async def on_message(message: types.Message):
    msg = await message.answer("–ë—É–ø-–±—É–ø... –°–æ–∫—Ä–∞—â–∞—é...")

    links = cut_link(link=[message.text])

    await msg.delete()

    if links[0].short_url:
        await message.answer(f"–î–µ—Ä–∂–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É:\
                            {links[0].short_url}")
    else:
        await message.answer("–£—É–ø—Å.. –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞üòî")



@dp.inline_handler()
async def inline_handler(query: types.InlineQuery):

    links = cut_link(link=[query.query])

    

    if links[0].short_url:

        article = [types.InlineQueryResultArticle(
            id=str(uuid4()),
            title=str(links[0].short_url),
            input_message_content=types.InputTextMessageContent(message_text=f"{links[0].short_url}")
        )]

        await query.answer(article, cache_time=60, is_personal=True)

    else:
        article_not_found = [types.InlineQueryResultArticle(
            id=str(uuid4()),
            title="–£—É–ø—Å.. –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞",
            input_message_content=types.InputTextMessageContent(message_text="–°—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è"),
            thumb_url="https://cdn5.vectorstock.com/i/1000x1000/93/24/hyperlink-to-unsecured-website-is-invalid-vector-25729324.jpg"
        )]

        await query.answer(article_not_found, cache_time=60, is_personal=True)

if __name__ == "__main__":
    executor.start_polling(dp)